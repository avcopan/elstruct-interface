"""
Library of functions to retrieve structural information from a Molpro 2015 output file

Structural currently supported:
(1) final optimized geometry in Cartesian (xyz) coordinates;
(2) final optimized geometry in internal coordinates;
(3) initial geometry in Cartesian (xyz) coordinates;
(4) initial geometry in internal coordinates; and
(5) equilibrium Rotational Constants

"""

__authors__ = "Kevin Moore, Andreas Copan"
__updated__ = "2019-01-11"

from ..rere import find as ref
from ..rere import pattern as rep
from ..rere import pattern_lib as relib
from ... import params


##### HELPER FUNCTION TO RETRIEVE TEXT BLOCK; TODO: Move to rere library #####

def block(head_string, foot_string, string):
    """ Returns a block of text
    """
    head_pattern = rep.escape(head_string)
    foot_pattern = rep.escape(foot_string)
    block_pattern = rep.capturing(
        head_pattern + rep.one_or_more(relib.ANY_CHAR, greedy=False) +
        foot_pattern)
    return ref.last_capture(block_pattern, string)

##### Patterns #####


def opt_geom_xyz_reader(output_string):
    """ Retrieves the optimized geometry in Cartesian xyz coordinates.
        Units of Angstrom and degrees.
    """

    # Pattern to idetify block of output string where optimized geometry is located
    opt_geom_xyz_begin_pattern = 'END OF GEOMETRY OPTIMIZATION'
    opt_geom_xyz_end_pattern = 'Geometry written to block'

    # Pattern for the xyz coordinate of each atom
    opt_geom_xyz_pattern = (
        rep.one_or_more(relib.ANY_CHAR) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.one_or_more(relib.FLOAT) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.one_or_more(relib.FLOAT) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.one_or_more(relib.FLOAT)
    )

    # Obtain block of output string containing the optimized geometry in xyz coordinates
    opt_geom_block = block(opt_geom_xyz_begin_pattern, opt_geom_xyz_end_pattern, output_string)

    # Obtain the xyz coordinates from the block
    opt_geom_xyz = ref.capturing(opt_geom_block, opt_geom_xyz_pattern)

    return opt_geom_xyz

def opt_geom_internal_reader(output_string):
    """ Retrieves the optimized geometry in internal coordinates.
        Units of Angstrom and degrees.
    """

    # internal coords of optimized geom
    opt_geom_internal_begin_pattern = 'Optimized variables'
    opt_geom_internal_end_pattern = '*********************'

    opt_geom_internal = ''

    return opt_geom_internal

def init_geom_xyz_reader(output_string):
    """ Retrieves the initial geometry in Cartesian xyz coordinates.
        Units of Angstrom and degrees.
    """

    # Initial geom in xyz generated by Molpro (in bohrs auto)
    init_geom_xyz_begin_pattern = 'ATOMIC COORDINATES'
    init_geom_xyz_end_pattern = 'Bond lengths in Bohr (Angstrom)'

    init_geom_xyz_pattern = (
        rep.one_or_more(relib.INTEGER) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.one_or_more(relib.ANY_CHAR) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.one_or_more(relib.FLOAT) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.one_or_more(relib.FLOAT) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.one_or_more(relib.FLOAT) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.one_or_more(relib.FLOAT)
    )

    init_geom_xyz = ''

    return init_geom_xyz

def init_geom_internal_reader(output_string):
    """ Retrieves the initial geometry in internal coordinates.
        Units of Angstrom and degrees.
    """

    # Initial internal coord defs
    init_geom_internal_begin_pattern = 'Primary working directories'
    init_geom_internal_end_pattern = 'Variables initialized'

    return

def equil_rot_constant_reader(output_string):
    """ Retrieves the equilibrium rotational constant of the optimized geometry.
        Units of cm-1.
    """

    equil_rot_const_pattern = (
        'Rotational constants:' +
        rep.one_or_more(relib.WHITESPACE) +
        rep.capturing(relib.FLOAT) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.capturing(relib.FLOAT) +
        rep.one_or_more(relib.WHITESPACE) +
        rep.capturing(relib.FLOAT) +
        rep.one_or_more(relib.WHITESPACE) +
        'GHz  (calculated with average atomic masses)'
    )

    return equil_rot_const


##### Dictionary for strings to find the geometries in the files #####

STRUCTURE_READERS = {
    params.STRUCTURE.OPT_GEOM_XYZ: opt_geom_xyz_reader,
    params.STRUCTURE.OPT_GEOM_INT: opt_geom_internal_reader,
    params.STRUCTURE.INIT_GEOM_XYZ: init_geom_xyz_reader,
    params.STRUCTURE.INIT_GEOM_INT: init_geom_internal_reader,
    params.STRUCTURE.EQUIL_ROT_CONST: equil_rot_const_reader,
}

##### Structure function called by external scripts #####

def structure(struct, output_string):
    """ Calls the appropriate function to read in the energy
    """

    assert struct in STRUCTURE_READERS.keys()

    struct = STRUCTURE_READERS[struct](output_string)

    return struct

##### For lazy testing #####

if __name__ == '__main__':
    STRING = open('output.dat').read()
    print(block('Current geometry', '***********', STRING))
#### FROM PA TOOLS #####
#### Grab Structural Information ###
#
#def geometry(lines, coords='xyz', choice='final')
#  ''' Finds all the geometries in a file
#      Returns geometry in xyz or internal coordinates, in Angstrom
#  '''
#
#  # Get the number of atoms
#  natom = calc_natom(lines)
#
#  # Get geometries requested by user
#  if choice == 'initial':
#    # Grabs initial xyz (only xyz avail) for debug purpose
#    search INIT_GEOM_PATTERN in file for linenum
#    for line in lines[ linenum + 4, linenum + 4 + natom + 1 ]
#
#  else:
#    # Grabs other geometries
#    search GEOM_OPT_STEP_PATTERN in file for linenums
#    for num in linenums
#
#    if choice == 'final':
#      geom = geoms[-1]
#    if choice == 'all':
#      geom = geoms
#
#  return geom
#
## from patools
#def zmat(lines):
#    geolines =  lines.split('geometry={')[1].split('}')[0].split('\n')[1:-1]
#    zmat = 'geometry={angstrom \n' + '\n'.join(geolines) + '\n}\n'
#    optzmat = False
#    if 'OPTG' in lines:
#        optzmat = True
#        lines = lines.split('END OF GEOMETRY OPTIMIZATION')[0].split('Variable')[-1].split('\n')
#        lines = lines[3:-3]
#        for line in lines:
#            zmat += line.split()[0].lower() + ' =  ' + line.split()[4] + '\n'
#    if optzmat:
#        return zmat
#    return None
#
## from patools
#def geo(lines):
#    lines =  lines.split('Current geometry (xyz format')
#    if len(lines) > 1:
#        lines = lines[-1].split('************')[0]
#        lines =  lines.split('\n')[4:]
#        return '\n'.join(lines)
#    else:
#        lines =  lines[0].split('Dump information in style XYZ')
#        if len(lines) > 1:
#            lines = lines[-1].split('************')[0]
#            lines =  lines.split('\n')[4:]
#            return '\n'.join(lines)
#    return
#
